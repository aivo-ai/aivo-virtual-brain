name: Model Registry Service CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "services/model-registry-svc/**"
  pull_request:
    branches: [main]
    paths:
      - "services/model-registry-svc/**"

defaults:
  run:
    working-directory: services/model-registry-svc

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_model_registry
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up test environment
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_model_registry
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          ENVIRONMENT: test
        run: |
          # Run database migrations
          alembic upgrade head

      - name: Run linting
        run: |
          flake8 app/ tests/ --max-line-length=100 --ignore=E203,W503
          black --check app/ tests/
          isort --check-only app/ tests/

      - name: Run type checking
        run: |
          mypy app/ --ignore-missing-imports

      - name: Run tests with coverage
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_model_registry
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          ENVIRONMENT: test
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./services/model-registry-svc/coverage.xml
          flags: model-registry
          name: model-registry-coverage

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install security tools
        working-directory: services/model-registry-svc
        run: |
          python -m pip install bandit safety
          pip install -r requirements.txt

      - name: Run security scan with Bandit
        working-directory: services/model-registry-svc
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ --severity-level medium

      - name: Check dependencies for vulnerabilities
        working-directory: services/model-registry-svc
        run: |
          safety check --json --output safety-report.json || true
          safety check

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/model-registry-svc
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/model-registry-svc
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "INFO: Model Registry deployment step"
          echo "INFO: This would typically:"
          echo "  - Update Kubernetes manifests for model-registry-svc"
          echo "  - Apply database migrations with alembic upgrade head"  
          echo "  - Deploy to production environment"
          echo "  - Run health checks on /health endpoint"
          echo "  - Verify model registry statistics endpoint"
