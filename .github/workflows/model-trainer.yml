name: Model Trainer Service CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "services/model-trainer-svc/**"
  pull_request:
    branches: [main]
    paths:
      - "services/model-trainer-svc/**"

defaults:
  run:
    working-directory: services/model-trainer-svc

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: trainer
          POSTGRES_PASSWORD: trainer
          POSTGRES_DB: test_model_trainer
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up test environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://trainer:trainer@localhost:5433/test_model_trainer" >> .env
          echo "REDIS_URL=redis://localhost:6380/0" >> .env
          echo "OPENAI_API_KEY=test_key" >> .env

      - name: Run database migrations
        run: |
          alembic upgrade head

      - name: Run linting
        run: |
          ruff check app tests
          black --check app tests
          isort --check-only app tests

      - name: Run type checking
        run: |
          mypy app

      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./services/model-trainer-svc/coverage.xml
          flags: model-trainer-svc
          name: model-trainer-coverage

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run security checks
        run: |
          bandit -r app/ -f json -o bandit-report.json
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            services/model-trainer-svc/bandit-report.json
            services/model-trainer-svc/safety-report.json

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.CONTAINER_USERNAME }}
          password: ${{ secrets.CONTAINER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.CONTAINER_REGISTRY }}/aivo/model-trainer
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/model-trainer-svc
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'

    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying Model Trainer Service to staging..."
          # Add deployment commands here
          # e.g., kubectl apply, helm upgrade, etc.

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here
          curl -f http://staging-trainer.aivo.ai/health || exit 1

      - name: Deploy to production
        if: success()
        run: |
          echo "Deploying Model Trainer Service to production..."
          # Add production deployment commands here

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
          text: "Model Trainer Service deployment ${{ job.status }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
