version: "3.8"

services:
  # Database for testing
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: aivo_test
      POSTGRES_USER: aivo
      POSTGRES_PASSWORD: aivo_test_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aivo -d aivo_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Gateway for API routing
  kong:
    image: kong:3.4
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
    ports:
      - "8080:8000" # Proxy port
      - "8001:8001" # Admin port
    volumes:
      - ./apps/gateway/kong.yml:/kong/kong.yml:ro
    depends_on:
      - gateway
      - assessment-svc
      - search-svc
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Gateway service (AI inference)
  gateway:
    build:
      context: ./apps/gateway
      dockerfile: Dockerfile
    environment:
      NODE_ENV: test
      PORT: 3000
      DATABASE_URL: postgresql://aivo:aivo_test_pass@postgres:5432/aivo_test
      OPENAI_API_KEY: ${OPENAI_API_KEY:-test-key}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-test-key}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-test-key}
      LOG_LEVEL: info
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Assessment service
  assessment-svc:
    build:
      context: ./services/assessment-svc
      dockerfile: Dockerfile
    environment:
      ENVIRONMENT: test
      DATABASE_URL: postgresql://aivo:aivo_test_pass@postgres:5432/aivo_test
      JWT_SECRET: test-jwt-secret
      LOG_LEVEL: info
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Search service
  search-svc:
    build:
      context: ./services/search-svc
      dockerfile: Dockerfile
    environment:
      ENVIRONMENT: test
      DATABASE_URL: postgresql://aivo:aivo_test_pass@postgres:5432/aivo_test
      ELASTICSEARCH_URL: http://elasticsearch:9200
      JWT_SECRET: test-jwt-secret
      LOG_LEVEL: info
    ports:
      - "8083:8080"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  # Elasticsearch for search functionality
  elasticsearch:
    image: elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_test_data:/usr/share/elasticsearch/data
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.test.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"

volumes:
  postgres_test_data:
  elasticsearch_test_data:
  redis_test_data:

networks:
  default:
    name: aivo-test-network
