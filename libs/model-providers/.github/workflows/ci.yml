name: CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "libs/model-providers/**"
  pull_request:
    branches: [main]
    paths:
      - "libs/model-providers/**"

defaults:
  run:
    working-directory: libs/model-providers

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Lint with black and isort
        run: |
          black --check .
          isort --check-only .

      - name: Type check with mypy
        run: |
          mypy aivo_model_providers --ignore-missing-imports

      - name: Test with pytest
        env:
          # Mock API keys for testing (will use mock providers)
          OPENAI_API_KEY: "test-key-for-mocking"
          GOOGLE_CLOUD_PROJECT: "test-project"
          AWS_ACCESS_KEY_ID: "test-access-key"
          AWS_SECRET_ACCESS_KEY: "test-secret-key"
        run: |
          pytest --cov=aivo_model_providers --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: libs/model-providers/coverage.xml
          flags: model-providers
          name: model-providers-coverage

  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Security scan with bandit
        run: |
          bandit -r aivo_model_providers -f json -o bandit-report.json || true
          bandit -r aivo_model_providers

      - name: Dependency vulnerability scan with safety
        run: |
          safety check --json --output safety-report.json || true
          safety check

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: libs/model-providers/dist/

  integration-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run integration tests (with mocked providers)
        env:
          # These will trigger mock provider behavior
          AIVO_INTEGRATION_TEST: "true"
        run: |
          python examples.py --mock-mode

      - name: Test provider availability detection
        run: |
          python -c "
          import asyncio
          from aivo_model_providers import get_available_providers, get_feature_flags

          async def test():
              providers = await get_available_providers()
              flags = get_feature_flags()
              print(f'Available providers: {[p.value for p in providers]}')
              print(f'Feature flags: {flags}')
              assert isinstance(providers, list)
              assert isinstance(flags, dict)
              print('âœ… Provider detection working correctly')

          asyncio.run(test())
          "
