/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * AIVO Notification Service API
 * Real-time notification service with WebSocket hub, push subscriptions, and daily digest functionality.

## Features
- **WebSocket Hub**: Real-time notification delivery via WebSocket connections
- **Push Subscriptions**: Browser push notifications with Web Push API
- **Daily Digest**: Automated daily summary notifications
- **Multi-channel Delivery**: Support for WebSocket, push, email, and in-app notifications
- **Real-time Collaboration**: 1-to-N message fanout for collaborative features

## Authentication
All endpoints require JWT authentication via the `Authorization` header:
```
Authorization: Bearer <jwt_token>
```

## WebSocket Connection
Connect to real-time notifications via WebSocket:
```
wss://api.aivo.ai/notification-svc/ws/notify?token=<jwt_token>
```

 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import { NotificationPriority } from "../../types";
import type { DigestSubscription } from "../../types";

export const getGetApiV1DigestSubscriptionResponseMock =
  (): DigestSubscription => ({
    ...{
      is_enabled: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      delivery_time: faker.helpers.arrayElement([
        faker.helpers.fromRegExp("^([0-1][0-9]|2[0-3]):[0-5][0-9]$"),
        undefined,
      ]),
      timezone: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 50 } }),
        undefined,
      ]),
      frequency: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["daily", "weekly"] as const),
        undefined,
      ]),
      include_types: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        undefined,
      ]),
      exclude_weekends: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      min_priority: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(NotificationPriority)),
        undefined,
      ]),
    },
    ...{
      id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      last_sent_at: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
      next_scheduled_at: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
    },
  });

export const getGetApiV1DigestSubscriptionMockHandler = (
  overrideResponse?:
    | DigestSubscription
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<DigestSubscription> | DigestSubscription),
) => {
  return http.get("*/api/v1/digest/subscription", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1DigestSubscriptionResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutApiV1DigestSubscriptionMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.put("*/api/v1/digest/subscription", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getDailyDigestMock = () => [
  getGetApiV1DigestSubscriptionMockHandler(),
  getPutApiV1DigestSubscriptionMockHandler(),
];
