/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * AIVO Search Service API
 * OpenSearch-powered search and suggestion service with role-based access control.

## Overview

The AIVO Search Service provides comprehensive full-text search capabilities across
educational documents including IEPs, assessments, student records, and curriculum
resources. All search operations enforce role-based access control (RBAC) to ensure
users only access data they're authorized to view.

## Authentication

All endpoints require JWT authentication via the `Authorization: Bearer <token>` header.
The JWT token must contain:
- `sub`: User ID
- `tenant_id`: Tenant identifier  
- `roles`: Array of user roles
- `school_ids`: Array of accessible school IDs
- `student_ids`: Array of accessible student IDs (for parents)

## Role-Based Access Control

Access to search results is filtered based on user roles:

- **System Admin**: Access to all data across all tenants
- **Tenant Admin**: Access to all data within their tenant
- **School Admin**: Access to data within their assigned schools
- **Teacher**: Access to student data within their schools
- **Case Manager**: Access to IEPs and assessments within their schools
- **Parent**: Access to their children's IEPs and assessments only
- **Student**: Access to their own IEP data only

## Document Types

- `iep`: Individual Education Programs
- `assessment`: Psychological and educational assessments
- `student`: Student profile information
- `curriculum`: Curriculum standards and learning objectives
- `resource`: Educational resources and materials

 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  DeleteIndexDocTypeDocId200,
  GetStats200,
  PostIndex200,
  SearchResponse,
  SuggestionResponse
} from '../../types';


export const getGetSearchResponseMock = (overrideResponse: Partial< SearchResponse > = {}): SearchResponse => ({results: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha({length: {min: 10, max: 20}}), title: faker.string.alpha({length: {min: 10, max: 20}}), content: faker.string.alpha({length: {min: 10, max: 20}}), document_type: faker.helpers.arrayElement(['iep','assessment','student','curriculum','resource'] as const), tenant_id: faker.string.alpha({length: {min: 10, max: 20}}), school_id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined]), created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), score: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), null]), undefined]), highlight: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}})))
      }, undefined]), metadata: faker.helpers.arrayElement([{}, undefined])})), total: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), page: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), size: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), query: faker.string.alpha({length: {min: 10, max: 20}}), filters: {doc_types: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), tenant_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), school_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined])}, took: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), ...overrideResponse})

export const getGetSuggestResponseMock = (overrideResponse: Partial< SuggestionResponse > = {}): SuggestionResponse => ({suggestions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({text: faker.string.alpha({length: {min: 10, max: 20}}), score: faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), category: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), null]), undefined])})), query: faker.string.alpha({length: {min: 10, max: 20}}), total: faker.number.int({min: undefined, max: undefined, multipleOf: undefined}), ...overrideResponse})

export const getPostIndexResponseMock = (overrideResponse: Partial< PostIndex200 > = {}): PostIndex200 => ({indexed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), document_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), document_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), result: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse})

export const getDeleteIndexDocTypeDocIdResponseMock = (overrideResponse: Partial< DeleteIndexDocTypeDocId200 > = {}): DeleteIndexDocTypeDocId200 => ({deleted: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), document_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), document_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), result: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse})

export const getGetStatsResponseMock = (overrideResponse: Partial< GetStats200 > = {}): GetStats200 => ({user_context: faker.helpers.arrayElement([{}, undefined]), search_health: faker.helpers.arrayElement([{}, undefined]), accessible_document_types: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined]), cross_school_access: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})


export const getGetSearchMockHandler = (overrideResponse?: SearchResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SearchResponse> | SearchResponse)) => {
  return http.get('*/search', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetSearchResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetSuggestMockHandler = (overrideResponse?: SuggestionResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SuggestionResponse> | SuggestionResponse)) => {
  return http.get('*/suggest', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetSuggestResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostIndexMockHandler = (overrideResponse?: PostIndex200 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostIndex200> | PostIndex200)) => {
  return http.post('*/index', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostIndexResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteIndexDocTypeDocIdMockHandler = (overrideResponse?: DeleteIndexDocTypeDocId200 | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteIndexDocTypeDocId200> | DeleteIndexDocTypeDocId200)) => {
  return http.delete('*/index/:docType/:docId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getDeleteIndexDocTypeDocIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetStatsMockHandler = (overrideResponse?: GetStats200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetStats200> | GetStats200)) => {
  return http.get('*/stats', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetStatsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getDefaultMock = () => [
  getGetSearchMockHandler(),
  getGetSuggestMockHandler(),
  getPostIndexMockHandler(),
  getDeleteIndexDocTypeDocIdMockHandler(),
  getGetStatsMockHandler()]
