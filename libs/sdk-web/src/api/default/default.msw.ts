/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Orchestrator Service API
 * Event-driven orchestration service for intelligent level suggestions and game break triggers
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  ActionList,
  EventList,
  HealthResponse,
  LearnerOrchestrationState,
  OrchestrationStats,
  TriggerEventResponse,
} from "../../types";

export const getGetHealthResponseMock = (
  overrideResponse: Partial<HealthResponse> = {},
): HealthResponse => ({
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["healthy", "degraded", "unhealthy"] as const),
    undefined,
  ]),
  timestamp: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  version: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  components: faker.helpers.arrayElement([
    {
      event_consumer: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "healthy",
          "degraded",
          "unhealthy",
        ] as const),
        undefined,
      ]),
      orchestration_engine: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "healthy",
          "degraded",
          "unhealthy",
        ] as const),
        undefined,
      ]),
      redis_connection: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "healthy",
          "degraded",
          "unhealthy",
        ] as const),
        undefined,
      ]),
      service_clients: faker.helpers.arrayElement([
        {
          [faker.string.alphanumeric(5)]: faker.string.alpha({
            length: { min: 10, max: 20 },
          }),
        },
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetStatsResponseMock = (
  overrideResponse: Partial<OrchestrationStats> = {},
): OrchestrationStats => ({
  total_events_processed: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  level_suggestions_sent: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  game_breaks_scheduled: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  sel_interventions_triggered: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  learning_path_updates: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  active_learners: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  is_initialized: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  uptime_seconds: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  last_event_processed_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getTriggerEventResponseMock = (
  overrideResponse: Partial<TriggerEventResponse> = {},
): TriggerEventResponse => ({
  event_id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
  actions_generated: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "LEVEL_SUGGESTED",
          "GAME_BREAK",
          "SEL_INTERVENTION",
          "LEARNING_PATH_UPDATE",
        ] as const),
        undefined,
      ]),
      target_service: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      learner_id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      tenant_id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      action_data: faker.helpers.arrayElement([{}, undefined]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "pending",
          "executing",
          "completed",
          "failed",
        ] as const),
        undefined,
      ]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      executed_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      error_message: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  processing_time_ms: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListEventsResponseMock = (
  overrideResponse: Partial<EventList> = {},
): EventList => ({
  events: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "BASELINE_COMPLETE",
          "SLP_UPDATED",
          "SEL_ALERT",
          "COURSEWORK_ANALYZED",
          "ASSESSMENT_COMPLETE",
          "LEARNER_PROGRESS",
          "ENGAGEMENT_LOW",
        ] as const),
        undefined,
      ]),
      learner_id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      tenant_id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      timestamp: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      data: faker.helpers.arrayElement([{}, undefined]),
      processed_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      actions_generated: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  total_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  has_more: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  filters_applied: faker.helpers.arrayElement([{}, undefined]),
  ...overrideResponse,
});

export const getListActionsResponseMock = (
  overrideResponse: Partial<ActionList> = {},
): ActionList => ({
  actions: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "LEVEL_SUGGESTED",
          "GAME_BREAK",
          "SEL_INTERVENTION",
          "LEARNING_PATH_UPDATE",
        ] as const),
        undefined,
      ]),
      target_service: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      learner_id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      tenant_id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      action_data: faker.helpers.arrayElement([{}, undefined]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          "pending",
          "executing",
          "completed",
          "failed",
        ] as const),
        undefined,
      ]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      executed_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      error_message: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  total_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  has_more: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  filters_applied: faker.helpers.arrayElement([{}, undefined]),
  ...overrideResponse,
});

export const getGetLearnerStateResponseMock = (
  overrideResponse: Partial<LearnerOrchestrationState> = {},
): LearnerOrchestrationState => ({
  learner_id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
  tenant_id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
  current_level: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      "beginner",
      "easy",
      "moderate",
      "challenging",
      "advanced",
    ] as const),
    undefined,
  ]),
  engagement_score: faker.helpers.arrayElement([
    faker.number.float({ min: 0, max: 1, fractionDigits: 2 }),
    undefined,
  ]),
  performance_score: faker.helpers.arrayElement([
    faker.number.float({ min: 0, max: 1, fractionDigits: 2 }),
    undefined,
  ]),
  consecutive_correct: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  consecutive_incorrect: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  session_duration_minutes: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  break_due_time: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  last_break_time: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  sel_alerts: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      timestamp: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      alert_type: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      severity: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      data: faker.helpers.arrayElement([{}, undefined]),
    })),
    undefined,
  ]),
  baseline_established: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  slp_data: faker.helpers.arrayElement([{}, undefined]),
  recent_assessments: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      timestamp: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      score: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      percentile: faker.helpers.arrayElement([
        faker.number.float({
          min: undefined,
          max: undefined,
          fractionDigits: 2,
        }),
        undefined,
      ]),
      assessment_type: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetHealthMockHandler = (
  overrideResponse?:
    | HealthResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<HealthResponse> | HealthResponse),
) => {
  return http.get("*/health", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetHealthResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetStatsMockHandler = (
  overrideResponse?:
    | OrchestrationStats
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<OrchestrationStats> | OrchestrationStats),
) => {
  return http.get("*/stats", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetStatsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getTriggerEventMockHandler = (
  overrideResponse?:
    | TriggerEventResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TriggerEventResponse> | TriggerEventResponse),
) => {
  return http.post("*/internal/trigger", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getTriggerEventResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getListEventsMockHandler = (
  overrideResponse?:
    | EventList
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<EventList> | EventList),
) => {
  return http.get("*/events", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListEventsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getListActionsMockHandler = (
  overrideResponse?:
    | ActionList
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ActionList> | ActionList),
) => {
  return http.get("*/actions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListActionsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetLearnerStateMockHandler = (
  overrideResponse?:
    | LearnerOrchestrationState
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<LearnerOrchestrationState> | LearnerOrchestrationState),
) => {
  return http.get("*/learners/:learnerId/state", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetLearnerStateResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getDefaultMock = () => [
  getGetHealthMockHandler(),
  getGetStatsMockHandler(),
  getTriggerEventMockHandler(),
  getListEventsMockHandler(),
  getListActionsMockHandler(),
  getGetLearnerStateMockHandler(),
];
