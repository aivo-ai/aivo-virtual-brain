/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * AIVO Search Service API
 * OpenSearch-powered search and suggestion service with role-based access control.

## Overview

The AIVO Search Service provides comprehensive full-text search capabilities across
educational documents including IEPs, assessments, student records, and curriculum
resources. All search operations enforce role-based access control (RBAC) to ensure
users only access data they're authorized to view.

## Authentication

All endpoints require JWT authentication via the `Authorization: Bearer <token>` header.
The JWT token must contain:
- `sub`: User ID
- `tenant_id`: Tenant identifier  
- `roles`: Array of user roles
- `school_ids`: Array of accessible school IDs
- `student_ids`: Array of accessible student IDs (for parents)

## Role-Based Access Control

Access to search results is filtered based on user roles:

- **System Admin**: Access to all data across all tenants
- **Tenant Admin**: Access to all data within their tenant
- **School Admin**: Access to data within their assigned schools
- **Teacher**: Access to student data within their schools
- **Case Manager**: Access to IEPs and assessments within their schools
- **Parent**: Access to their children's IEPs and assessments only
- **Student**: Access to their own IEP data only

## Document Types

- `iep`: Individual Education Programs
- `assessment`: Psychological and educational assessments
- `student`: Student profile information
- `curriculum`: Curriculum standards and learning objectives
- `resource`: Educational resources and materials

 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DeleteIndexDocTypeDocId200,
  GetSearchParams,
  GetStats200,
  GetSuggestParams,
  IndexDocument,
  PostIndex200,
  SearchResponse,
  SuggestionResponse
} from '../../types';




  export const getDefault = () => {
/**
 * Perform full-text search across educational documents with RBAC filtering.

## Features

- Multi-field search across title, content, goals, accommodations
- Document type filtering (IEP, assessment, curriculum, etc.)
- Pagination support
- Custom sorting options
- Syntax highlighting in results
- Role-based result filtering

## Examples

**Basic search:**
```
GET /search?q=reading comprehension
```

**Search specific document types:**
```
GET /search?q=autism&doc_types=iep,assessment
```

**Search with pagination:**
```
GET /search?q=math&size=10&from=20
```

**Search with sorting:**
```
GET /search?q=goals&sort=updated_at:desc,score:desc
```

 * @summary Search Documents
 */
const getSearch = <TData = AxiosResponse<SearchResponse>>(
    params: GetSearchParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
/**
 * Get search suggestions with role-based filtering for auto-complete functionality.

## Features

- Real-time query suggestions
- Prefix matching with fuzzy tolerance
- Role-based suggestion filtering
- Category-based suggestions
- Cross-school visibility controls

## Examples

**Basic suggestions:**
```
GET /suggest?q=fra
```
Returns: "fractions", "framework", "fragmented"

**Limited suggestions:**
```
GET /suggest?q=read&size=5
```
Returns top 5 reading-related suggestions

 * @summary Get Search Suggestions
 */
const getSuggest = <TData = AxiosResponse<SuggestionResponse>>(
    params: GetSuggestParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/suggest`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
/**
 * Index a document for search (internal use by other AIVO services).

This endpoint is typically called by other services when documents
are created or updated to ensure they appear in search results.

 * @summary Index Document (Internal)
 */
const postIndex = <TData = AxiosResponse<PostIndex200>>(
    indexDocument: IndexDocument, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/index`,
      indexDocument,options
    );
  }
/**
 * Remove a document from the search index
 * @summary Delete Document (Internal)
 */
const deleteIndexDocTypeDocId = <TData = AxiosResponse<DeleteIndexDocTypeDocId200>>(
    docType: 'iep' | 'assessment' | 'student' | 'curriculum' | 'resource',
    docId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/index/${docType}/${docId}`,options
    );
  }
/**
 * Get search statistics and user context information
 * @summary Search Statistics
 */
const getStats = <TData = AxiosResponse<GetStats200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/stats`,options
    );
  }
return {}};
