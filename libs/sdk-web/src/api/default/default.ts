/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Orchestrator Service API
 * Event-driven orchestration service for intelligent level suggestions and game break triggers
 * OpenAPI spec version: 1.0.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  ActionList,
  EventList,
  HealthResponse,
  LearnerOrchestrationState,
  ListActionsParams,
  ListEventsParams,
  OrchestrationStats,
  TriggerEventRequest,
  TriggerEventResponse,
} from "../../types";

export const getDefault = () => {
  /**
   * @summary Health check with component status
   */
  const getHealth = <TData = AxiosResponse<HealthResponse>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/health`, options);
  };
  /**
   * @summary Get orchestration statistics
   */
  const getStats = <TData = AxiosResponse<OrchestrationStats>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/stats`, options);
  };
  /**
   * @summary Manual event trigger for testing
   */
  const triggerEvent = <TData = AxiosResponse<TriggerEventResponse>>(
    triggerEventRequest: TriggerEventRequest,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(`/internal/trigger`, triggerEventRequest, options);
  };
  /**
   * @summary List processed events (admin only)
   */
  const listEvents = <TData = AxiosResponse<EventList>>(
    params?: ListEventsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/events`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };
  /**
   * @summary List generated actions (admin only)
   */
  const listActions = <TData = AxiosResponse<ActionList>>(
    params?: ListActionsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/actions`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };
  /**
   * @summary Get learner orchestration state
   */
  const getLearnerState = <TData = AxiosResponse<LearnerOrchestrationState>>(
    learnerId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/learners/${learnerId}/state`, options);
  };
  return {};
};
