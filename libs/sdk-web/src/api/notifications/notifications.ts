/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * AIVO Notification Service API
 * Real-time notification service with WebSocket hub, push subscriptions, and daily digest functionality.

## Features
- **WebSocket Hub**: Real-time notification delivery via WebSocket connections
- **Push Subscriptions**: Browser push notifications with Web Push API
- **Daily Digest**: Automated daily summary notifications
- **Multi-channel Delivery**: Support for WebSocket, push, email, and in-app notifications
- **Real-time Collaboration**: 1-to-N message fanout for collaborative features

## Authentication
All endpoints require JWT authentication via the `Authorization` header:
```
Authorization: Bearer <jwt_token>
```

## WebSocket Connection
Connect to real-time notifications via WebSocket:
```
wss://api.aivo.ai/notification-svc/ws/notify?token=<jwt_token>
```

 * OpenAPI spec version: 1.0.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  GetApiV1NotificationsParams,
  NotificationCreate,
  NotificationListResponse,
  NotificationResponse,
  PostApiV1NotificationsReadAll200,
} from "../../types";

export const getNotifications = () => {
  /**
 * Create a new notification for the current user.
The notification will be delivered via the specified channels.

 * @summary Create notification
 */
  const postApiV1Notifications = <TData = AxiosResponse<NotificationResponse>>(
    notificationCreate: NotificationCreate,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(`/api/v1/notifications`, notificationCreate, options);
  };
  /**
 * Get notifications for the current user with optional filtering and pagination.

 * @summary List notifications
 */
  const getApiV1Notifications = <
    TData = AxiosResponse<NotificationListResponse>,
  >(
    params?: GetApiV1NotificationsParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/api/v1/notifications`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };
  /**
   * Mark a specific notification as read
   * @summary Mark notification as read
   */
  const postApiV1NotificationsNotificationIdRead = <
    TData = AxiosResponse<null>,
  >(
    notificationId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios
      .post(`/api/v1/notifications/${notificationId}/read`, undefined, options)
      .then((res) => {
        if (res.data === "") res.data = null;
        return res as TData;
      });
  };
  /**
   * Mark all unread notifications as read for the current user
   * @summary Mark all notifications as read
   */
  const postApiV1NotificationsReadAll = <
    TData = AxiosResponse<PostApiV1NotificationsReadAll200>,
  >(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(`/api/v1/notifications/read-all`, undefined, options);
  };
  return {
    postApiV1Notifications,
    getApiV1Notifications,
    postApiV1NotificationsNotificationIdRead,
    postApiV1NotificationsReadAll,
  };
};
export type PostApiV1NotificationsResult = AxiosResponse<NotificationResponse>;
export type GetApiV1NotificationsResult =
  AxiosResponse<NotificationListResponse>;
export type PostApiV1NotificationsNotificationIdReadResult =
  AxiosResponse<null>;
export type PostApiV1NotificationsReadAllResult =
  AxiosResponse<PostApiV1NotificationsReadAll200>;
