/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * AIVO Notification Service API
 * Real-time notification service with WebSocket hub, push subscriptions, and daily digest functionality.

## Features
- **WebSocket Hub**: Real-time notification delivery via WebSocket connections
- **Push Subscriptions**: Browser push notifications with Web Push API
- **Daily Digest**: Automated daily summary notifications
- **Multi-channel Delivery**: Support for WebSocket, push, email, and in-app notifications
- **Real-time Collaboration**: 1-to-N message fanout for collaborative features

## Authentication
All endpoints require JWT authentication via the `Authorization` header:
```
Authorization: Bearer <jwt_token>
```

## WebSocket Connection
Connect to real-time notifications via WebSocket:
```
wss://api.aivo.ai/notification-svc/ws/notify?token=<jwt_token>
```

 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  NotificationListResponse,
  NotificationResponse,
  PostApiV1NotificationsReadAll200,
} from "../../types";

export const getPostApiV1NotificationsResponseMock = (
  overrideResponse: Partial<NotificationResponse> = {},
): NotificationResponse => ({
  id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
  title: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  notification_type: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  priority: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  read_at: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  action_url: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  metadata: faker.helpers.arrayElement([{}, undefined]),
  ...overrideResponse,
});

export const getGetApiV1NotificationsResponseMock = (
  overrideResponse: Partial<NotificationListResponse> = {},
): NotificationListResponse => ({
  notifications: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      title: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      message: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      notification_type: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      priority: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      read_at: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
      action_url: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.string.alpha({ length: { min: 10, max: 20 } }),
          null,
        ]),
        undefined,
      ]),
      metadata: faker.helpers.arrayElement([{}, undefined]),
    })),
    undefined,
  ]),
  total_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  unread_count: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  has_more: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  ...overrideResponse,
});

export const getPostApiV1NotificationsReadAllResponseMock = (
  overrideResponse: Partial<PostApiV1NotificationsReadAll200> = {},
): PostApiV1NotificationsReadAll200 => ({
  status: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostApiV1NotificationsMockHandler = (
  overrideResponse?:
    | NotificationResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<NotificationResponse> | NotificationResponse),
) => {
  return http.post("*/api/v1/notifications", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiV1NotificationsResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetApiV1NotificationsMockHandler = (
  overrideResponse?:
    | NotificationListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<NotificationListResponse> | NotificationListResponse),
) => {
  return http.get("*/api/v1/notifications", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1NotificationsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostApiV1NotificationsNotificationIdReadMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.post(
    "*/api/v1/notifications/:notificationId/read",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getPostApiV1NotificationsReadAllMockHandler = (
  overrideResponse?:
    | PostApiV1NotificationsReadAll200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<PostApiV1NotificationsReadAll200>
        | PostApiV1NotificationsReadAll200),
) => {
  return http.post("*/api/v1/notifications/read-all", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiV1NotificationsReadAllResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getNotificationsMock = () => [
  getPostApiV1NotificationsMockHandler(),
  getGetApiV1NotificationsMockHandler(),
  getPostApiV1NotificationsNotificationIdReadMockHandler(),
  getPostApiV1NotificationsReadAllMockHandler(),
];
