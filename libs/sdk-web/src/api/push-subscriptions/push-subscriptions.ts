/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * AIVO Notification Service API
 * Real-time notification service with WebSocket hub, push subscriptions, and daily digest functionality.

## Features
- **WebSocket Hub**: Real-time notification delivery via WebSocket connections
- **Push Subscriptions**: Browser push notifications with Web Push API
- **Daily Digest**: Automated daily summary notifications
- **Multi-channel Delivery**: Support for WebSocket, push, email, and in-app notifications
- **Real-time Collaboration**: 1-to-N message fanout for collaborative features

## Authentication
All endpoints require JWT authentication via the `Authorization` header:
```
Authorization: Bearer <jwt_token>
```

## WebSocket Connection
Connect to real-time notifications via WebSocket:
```
wss://api.aivo.ai/notification-svc/ws/notify?token=<jwt_token>
```

 * OpenAPI spec version: 1.0.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  PushSubscriptionCreate,
  PushSubscriptionResponse,
} from "../../types";

export const getPushSubscriptions = () => {
  /**
 * Register or update a web push subscription for browser notifications.
This endpoint stores the push endpoint and encryption keys needed for 
sending push notifications to the user's browser.

 * @summary Create push subscription
 */
  const postApiV1PushSubscribe = <
    TData = AxiosResponse<PushSubscriptionResponse>,
  >(
    pushSubscriptionCreate: PushSubscriptionCreate,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.post(
      `/api/v1/push/subscribe`,
      pushSubscriptionCreate,
      options,
    );
  };
  /**
   * Get all active push subscriptions for the current user
   * @summary List push subscriptions
   */
  const getApiV1PushSubscriptions = <
    TData = AxiosResponse<PushSubscriptionResponse[]>,
  >(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/api/v1/push/subscriptions`, options);
  };
  /**
   * Remove a push subscription (disable push notifications for this device)
   * @summary Delete push subscription
   */
  const deleteApiV1PushSubscriptionsSubscriptionId = <
    TData = AxiosResponse<null>,
  >(
    subscriptionId: string,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios
      .delete(`/api/v1/push/subscriptions/${subscriptionId}`, options)
      .then((res) => {
        if (res.data === "") res.data = null;
        return res as TData;
      });
  };
  return {
    postApiV1PushSubscribe,
    getApiV1PushSubscriptions,
    deleteApiV1PushSubscriptionsSubscriptionId,
  };
};
export type PostApiV1PushSubscribeResult =
  AxiosResponse<PushSubscriptionResponse>;
export type GetApiV1PushSubscriptionsResult = AxiosResponse<
  PushSubscriptionResponse[]
>;
export type DeleteApiV1PushSubscriptionsSubscriptionIdResult =
  AxiosResponse<null>;
