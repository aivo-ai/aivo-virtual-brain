/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * AIVO Notification Service API
 * Real-time notification service with WebSocket hub, push subscriptions, and daily digest functionality.

## Features
- **WebSocket Hub**: Real-time notification delivery via WebSocket connections
- **Push Subscriptions**: Browser push notifications with Web Push API
- **Daily Digest**: Automated daily summary notifications
- **Multi-channel Delivery**: Support for WebSocket, push, email, and in-app notifications
- **Real-time Collaboration**: 1-to-N message fanout for collaborative features

## Authentication
All endpoints require JWT authentication via the `Authorization` header:
```
Authorization: Bearer <jwt_token>
```

## WebSocket Connection
Connect to real-time notifications via WebSocket:
```
wss://api.aivo.ai/notification-svc/ws/notify?token=<jwt_token>
```

 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { PushSubscriptionResponse } from "../../types";

export const getPostApiV1PushSubscribeResponseMock = (
  overrideResponse: Partial<PushSubscriptionResponse> = {},
): PushSubscriptionResponse => ({
  id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
  endpoint: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  created_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    undefined,
  ]),
  last_used_at: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetApiV1PushSubscriptionsResponseMock =
  (): PushSubscriptionResponse[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([faker.string.uuid(), undefined]),
      endpoint: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      is_active: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      created_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        undefined,
      ]),
      last_used_at: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
    }));

export const getPostApiV1PushSubscribeMockHandler = (
  overrideResponse?:
    | PushSubscriptionResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PushSubscriptionResponse> | PushSubscriptionResponse),
) => {
  return http.post("*/api/v1/push/subscribe", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostApiV1PushSubscribeResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetApiV1PushSubscriptionsMockHandler = (
  overrideResponse?:
    | PushSubscriptionResponse[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PushSubscriptionResponse[]> | PushSubscriptionResponse[]),
) => {
  return http.get("*/api/v1/push/subscriptions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetApiV1PushSubscriptionsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteApiV1PushSubscriptionsSubscriptionIdMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete(
    "*/api/v1/push/subscriptions/:subscriptionId",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};
export const getPushSubscriptionsMock = () => [
  getPostApiV1PushSubscribeMockHandler(),
  getGetApiV1PushSubscriptionsMockHandler(),
  getDeleteApiV1PushSubscriptionsSubscriptionIdMockHandler(),
];
