/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * AIVO Notification Service API
 * Real-time notification service with WebSocket hub, push subscriptions, and daily digest functionality.

## Features
- **WebSocket Hub**: Real-time notification delivery via WebSocket connections
- **Push Subscriptions**: Browser push notifications with Web Push API
- **Daily Digest**: Automated daily summary notifications
- **Multi-channel Delivery**: Support for WebSocket, push, email, and in-app notifications
- **Real-time Collaboration**: 1-to-N message fanout for collaborative features

## Authentication
All endpoints require JWT authentication via the `Authorization` header:
```
Authorization: Bearer <jwt_token>
```

## WebSocket Connection
Connect to real-time notifications via WebSocket:
```
wss://api.aivo.ai/notification-svc/ws/notify?token=<jwt_token>
```

 * OpenAPI spec version: 1.0.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

import type { GetWsNotifyParams, GetWsStatus200 } from "../../types";

export const getWebSocket = () => {
  /**
 * Connect to real-time notifications via WebSocket.

**Connection URL**: `ws://localhost:8003/ws/notify?token=<jwt_token>`

## Message Types

### Client to Server:
- `ping`: Keep-alive ping
- `mark_read`: Mark notification as read
- `subscribe_channel`: Subscribe to specific channels

### Server to Client:
- `notification`: New notification received
- `pong`: Response to ping
- `read_confirmation`: Confirmation of read status
- `subscription_confirmed`: Channel subscription confirmed

## Example Messages:

**Client Ping:**
```json
{"type": "ping", "timestamp": "2025-01-15T14:30:00Z"}
```

**Server Notification:**
```json
{
  "type": "notification",
  "data": {
    "id": "notification-id",
    "title": "New IEP Update",
    "message": "IEP document has been updated",
    "notification_type": "iep_update",
    "action_url": "/iep/12345"
  },
  "timestamp": "2025-01-15T14:30:00Z"
}
```

 * @summary WebSocket connection endpoint
 */
  const getWsNotify = <TData = AxiosResponse<unknown>>(
    params: GetWsNotifyParams,
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/ws/notify`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  };
  /**
   * Get current WebSocket connection statistics
   * @summary WebSocket connection status
   */
  const getWsStatus = <TData = AxiosResponse<GetWsStatus200>>(
    options?: AxiosRequestConfig,
  ): Promise<TData> => {
    return axios.get(`/ws/status`, options);
  };
  return { getWsNotify, getWsStatus };
};
export type GetWsNotifyResult = AxiosResponse<unknown>;
export type GetWsStatusResult = AxiosResponse<GetWsStatus200>;
