apiVersion: v1
kind: Namespace
metadata:
  name: argo-rollouts
  labels:
    app.kubernetes.io/name: argo-rollouts
    app.kubernetes.io/part-of: aivo-platform
    aivo.dev/component: release-management
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-rollouts
  namespace: argo-rollouts
  labels:
    app.kubernetes.io/name: argo-rollouts
    app.kubernetes.io/part-of: aivo-platform
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-rollouts
  labels:
    app.kubernetes.io/name: argo-rollouts
    app.kubernetes.io/part-of: aivo-platform
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - rollouts
      - rollouts/status
      - rollouts/finalizers
    verbs:
      - get
      - list
      - watch
      - update
      - patch
  - apiGroups:
      - apps
    resources:
      - replicasets
    verbs:
      - get
      - list
      - watch
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - list
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups:
      - split.smi-spec.io
    resources:
      - trafficsplits
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - update
      - patch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-rollouts
  labels:
    app.kubernetes.io/name: argo-rollouts
    app.kubernetes.io/part-of: aivo-platform
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-rollouts
subjects:
  - kind: ServiceAccount
    name: argo-rollouts
    namespace: argo-rollouts
---
apiVersion: v1
kind: Service
metadata:
  name: argo-rollouts-metrics
  namespace: argo-rollouts
  labels:
    app.kubernetes.io/name: argo-rollouts-metrics
    app.kubernetes.io/part-of: aivo-platform
    app.kubernetes.io/component: server
spec:
  ports:
    - name: metrics
      port: 8090
      protocol: TCP
      targetPort: 8090
  selector:
    app.kubernetes.io/name: argo-rollouts
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-rollouts
  namespace: argo-rollouts
  labels:
    app.kubernetes.io/name: argo-rollouts
    app.kubernetes.io/part-of: aivo-platform
    app.kubernetes.io/component: server
spec:
  replicas: 2
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app.kubernetes.io/name: argo-rollouts
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argo-rollouts
        app.kubernetes.io/part-of: aivo-platform
        app.kubernetes.io/component: server
    spec:
      serviceAccountName: argo-rollouts
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - argo-rollouts
                topologyKey: kubernetes.io/hostname
      containers:
        - name: argo-rollouts
          image: quay.io/argoproj/argo-rollouts:v1.6.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8090
              name: metrics
            - containerPort: 8080
              name: webhook
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 4
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 999
            seccompProfile:
              type: RuntimeDefault
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 512Mi
              cpu: 500m
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ROLLOUTS_LOG_LEVEL
              value: "info"
            - name: ROLLOUTS_PROMETHEUS_URL
              value: "http://prometheus.monitoring.svc.cluster.local:9090"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir: {}
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: argo-rollouts
  namespace: argo-rollouts
  labels:
    app.kubernetes.io/name: argo-rollouts
    app.kubernetes.io/part-of: aivo-platform
    app.kubernetes.io/component: server
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argo-rollouts-metrics
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
