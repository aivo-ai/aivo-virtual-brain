openapi: 3.0.3
info:
  title: AIVO Chat Service API
  description: |
    Threaded message history service for learner communication with privacy compliance.

    ## Features
    - **Threaded Conversations**: Organize messages into threaded conversations per learner
    - **RBAC Protection**: Role-based access control with learner scope validation
    - **Privacy Compliance**: GDPR-compliant data export and deletion
    - **Tenant Isolation**: Multi-tenant architecture with strict data isolation
    - **Event Publishing**: Kafka integration for real-time chat events

    ## Authentication
    All endpoints require Bearer token authentication with JWT tokens containing:
    - `user_id`: Authenticated user identifier
    - `tenant_id`: Tenant context for data isolation
    - `learner_scope`: Array of learner IDs the user can access
    - `role`: User role (teacher, guardian, admin, etc.)
    - `permissions`: Array of specific permissions

    ## Learner Scope
    Users can only access threads and messages for learners in their scope unless they have admin privileges.
  version: 1.0.0
  contact:
    name: AIVO Engineering Team
    url: https://aivo.com/support
  license:
    name: Proprietary
    url: https://aivo.com/license

servers:
  - url: https://api.aivo.com/chat/v1
    description: Production server
  - url: https://staging-api.aivo.com/chat/v1
    description: Staging server
  - url: http://localhost:8000/api/v1
    description: Development server

security:
  - BearerAuth: []

paths:
  # Thread Management
  /threads:
    get:
      summary: List chat threads
      description: Get a paginated list of chat threads, optionally filtered by learner
      tags:
        - Threads
      parameters:
        - name: learner_id
          in: query
          description: Filter threads by learner ID
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Number of threads to return (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of threads to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: List of threads
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadListResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

    post:
      summary: Create a new thread
      description: Create a new chat thread for a learner
      tags:
        - Threads
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThreadCreate"
      responses:
        "200":
          description: Thread created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /threads/{thread_id}:
    get:
      summary: Get a specific thread
      description: Retrieve details of a specific chat thread
      tags:
        - Threads
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Thread details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      summary: Update a thread
      description: Update thread details (title, description, metadata)
      tags:
        - Threads
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ThreadUpdate"
      responses:
        "200":
          description: Thread updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      summary: Delete a thread
      description: Delete a thread and all its messages
      tags:
        - Threads
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Thread deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Thread deleted successfully"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  # Message Management
  /threads/{thread_id}/messages:
    get:
      summary: List messages in a thread
      description: Get paginated messages from a specific thread
      tags:
        - Messages
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Number of messages to return (1-200)
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
        - name: offset
          in: query
          description: Number of messages to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: before
          in: query
          description: Get messages before this timestamp
          schema:
            type: string
            format: date-time
        - name: after
          in: query
          description: Get messages after this timestamp
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: List of messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageListResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    post:
      summary: Create a new message
      description: Add a new message to a thread
      tags:
        - Messages
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageCreate"
      responses:
        "200":
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /threads/{thread_id}/messages/{message_id}:
    get:
      summary: Get a specific message
      description: Retrieve details of a specific message
      tags:
        - Messages
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
        - name: message_id
          in: path
          required: true
          description: Message ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Message details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      summary: Update a message
      description: Update message content (users can only edit their own messages)
      tags:
        - Messages
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
        - name: message_id
          in: path
          required: true
          description: Message ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageUpdate"
      responses:
        "200":
          description: Message updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      summary: Delete a message
      description: Delete a message (users can only delete their own messages)
      tags:
        - Messages
      parameters:
        - name: thread_id
          in: path
          required: true
          description: Thread ID
          schema:
            type: string
            format: uuid
        - name: message_id
          in: path
          required: true
          description: Message ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Message deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Message deleted successfully"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  # Privacy & Compliance
  /privacy/export:
    post:
      summary: Export chat data
      description: Export all chat data for a learner (GDPR compliance)
      tags:
        - Privacy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrivacyExportRequest"
      responses:
        "200":
          description: Export request submitted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrivacyExportResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /privacy/delete:
    post:
      summary: Delete chat data
      description: Delete all chat data for a learner (GDPR right to be forgotten)
      tags:
        - Privacy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrivacyDeletionRequest"
      responses:
        "200":
          description: Deletion request submitted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrivacyDeletionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  # Health & Status
  /health:
    get:
      summary: Health check
      description: Service health status
      tags:
        - Health
      security: []
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  service:
                    type: string
                    example: "chat-service"
                  version:
                    type: string
                    example: "1.0.0"
                  database:
                    type: string
                    enum: [healthy, unhealthy]
                  environment:
                    type: string
                    example: "production"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Thread Schemas
    ThreadCreate:
      type: object
      required:
        - learner_id
        - title
      properties:
        learner_id:
          type: string
          format: uuid
          description: ID of the learner this thread belongs to
        title:
          type: string
          maxLength: 255
          description: Thread title
        description:
          type: string
          description: Optional thread description
        metadata:
          type: object
          description: Additional metadata for the thread

    ThreadUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
          description: Updated thread title
        description:
          type: string
          description: Updated thread description
        metadata:
          type: object
          description: Updated metadata

    ThreadResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        learner_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        metadata:
          type: object
        created_by:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ThreadListResponse:
      type: object
      properties:
        threads:
          type: array
          items:
            $ref: "#/components/schemas/ThreadResponse"
        total:
          type: integer
          description: Total number of threads
        limit:
          type: integer
          description: Number of threads requested
        offset:
          type: integer
          description: Number of threads skipped

    # Message Schemas
    MessageCreate:
      type: object
      required:
        - content
        - sender_type
      properties:
        content:
          type: string
          description: Message content
        sender_type:
          type: string
          enum: [teacher, guardian, student, system, assistant]
          description: Type of message sender
        message_type:
          type: string
          enum: [text, image, file, system, alert]
          default: text
          description: Type of message content
        metadata:
          type: object
          description: Additional message metadata

    MessageUpdate:
      type: object
      properties:
        content:
          type: string
          description: Updated message content
        metadata:
          type: object
          description: Updated metadata

    MessageResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        thread_id:
          type: string
          format: uuid
        content:
          type: string
        sender_id:
          type: string
          format: uuid
        sender_type:
          type: string
          enum: [teacher, guardian, student, system, assistant]
        message_type:
          type: string
          enum: [text, image, file, system, alert]
        metadata:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    MessageListResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageResponse"
        total:
          type: integer
          description: Total number of messages
        limit:
          type: integer
          description: Number of messages requested
        offset:
          type: integer
          description: Number of messages skipped

    # Privacy Schemas
    PrivacyExportRequest:
      type: object
      required:
        - learner_id
        - export_type
      properties:
        learner_id:
          type: string
          format: uuid
          description: ID of learner whose data to export
        export_type:
          type: string
          enum: [full, metadata_only]
          description: Type of export to perform

    PrivacyExportResponse:
      type: object
      properties:
        export_id:
          type: string
          format: uuid
          description: ID of the export request
        status:
          type: string
          enum: [pending, processing, completed, failed]
          description: Current status of the export
        requested_at:
          type: string
          format: date-time
          description: When the export was requested

    PrivacyDeletionRequest:
      type: object
      required:
        - learner_id
        - deletion_type
      properties:
        learner_id:
          type: string
          format: uuid
          description: ID of learner whose data to delete
        deletion_type:
          type: string
          enum: [full, messages_only, threads_only]
          description: Type of deletion to perform

    PrivacyDeletionResponse:
      type: object
      properties:
        deletion_id:
          type: string
          format: uuid
          description: ID of the deletion request
        status:
          type: string
          enum: [pending, processing, completed, failed]
          description: Current status of the deletion
        requested_at:
          type: string
          format: date-time
          description: When the deletion was requested

    # Error Schemas
    Error:
      type: object
      properties:
        detail:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        field:
          type: string
          description: Field that caused the error (for validation errors)

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            detail: "Validation error"
            code: "VALIDATION_ERROR"
            field: "learner_id"

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            detail: "Authentication required"
            code: "UNAUTHORIZED"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            detail: "Access denied: Insufficient permissions for this learner"
            code: "FORBIDDEN"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            detail: "Thread not found"
            code: "NOT_FOUND"

tags:
  - name: Threads
    description: Thread management operations
  - name: Messages
    description: Message management operations
  - name: Privacy
    description: Privacy and compliance operations
  - name: Health
    description: Service health and status
